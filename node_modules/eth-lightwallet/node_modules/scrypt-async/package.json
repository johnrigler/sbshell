{
  "name": "scrypt-async",
  "version": "1.3.1",
  "description": "Fast \"async\" scrypt implementation in JavaScript.",
  "main": "scrypt-async.js",
  "scripts": {
    "test": "grunt test",
    "build": "grunt build"
  },
  "devDependencies": {
    "coveralls": "2.11.12",
    "grunt": "1.0.1",
    "grunt-browserify": "5.0.0",
    "grunt-contrib-connect": "1.0.2",
    "grunt-contrib-copy": "1.0.0",
    "grunt-contrib-uglify": "2.0.0",
    "grunt-mocha-istanbul": "5.0.2",
    "grunt-saucelabs": "9.0.0",
    "istanbul": "0.4.5",
    "mocha": "3.0.2"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/dchest/scrypt-async-js.git"
  },
  "keywords": [
    "crypto",
    "cryptography",
    "scrypt",
    "password"
  ],
  "author": {
    "name": "Dmitry Chestnykh"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/dchest/scrypt-async-js/issues"
  },
  "homepage": "https://github.com/dchest/scrypt-async-js",
  "readme": "scrypt-async\n============\n\n[![Build Status](https://travis-ci.org/dchest/scrypt-async-js.svg?branch=master)](https://travis-ci.org/dchest/scrypt-async-js)\n[![Coverage Status](https://coveralls.io/repos/dchest/scrypt-async-js/badge.svg)](https://coveralls.io/r/dchest/scrypt-async-js)\n\n[![Saucelabs Test Status](https://saucelabs.com/browser-matrix/scrypt.svg)](https://saucelabs.com/u/scrypt)\n\nFast \"async\" scrypt implementation in JavaScript.\n\nWorks in browsers without throwing \"kill slow script\" warnings due to\nconfigurable interruptStep, which yields from calculation. Compatible even with\nold versions of IE. Also works with Node.js (but you should really use the C\nimplementation for that).\n\n\nInstallation\n------------\n\nYou can install it via a package manager:\n\n[Yarn](https://yarnpkg.com/):\n\n    $ yarn add scrypt-async\n\n[NPM](https://www.npmjs.org/):\n\n    $ npm install scrypt-async\n\n[Bower](http://bower.io):\n\n    $ bower install scrypt-async\n\nor [download source code](https://github.com/dchest/scrypt-async-js/releases).\n\nTo improve performance with small interruptStep values, use `setImmediate` shim,\nsuch as <https://github.com/YuzuJS/setImmediate>.\n\n\nUsage\n-----\n\n### Modern API\n\n#### scrypt(password, salt, options, callback)\n\nDerives a key from password and salt and calls callback\nwith derived key as the only argument.\n\nIf interruptStep is set, calculations are interrupted with setImmediate (or\nzero setTimeout) at the given interruptSteps to avoid freezing the browser.\nIf it's not set or set to zero, the callback is called immediately after the\ncalculation, avoiding setImmediate.\n\n#### Arguments:\n\n* *password* — password (`string` or `Array` of bytes or `Uint8Array`)\n* *salt* — salt (`string` or `Array` of bytes or `Uint8Array`)\n* *options* — object with key derivation options\n* *callback* — callback function receiving result (`function (Array|Uint8Array|string)`)\n\n##### Options:\n\n* `N` — CPU/memory cost parameter (must be power of two;\n  alternatively, you can specify `logN` where *N = 2^logN*).\n* `r` — block size parameter\n* `p` — parallelization parameter (default is 1)\n* `dkLen` — derived key length (default is 32)\n* `interruptStep` — (optional) steps to split calculation with timeouts (defaults to 0)\n* `encoding` — (optional) result encoding `'base64'` or `'hex'` (result with be a `string`), `'binary'` (result will be a `Uint8Array`) or undefined (result will be an `Array` of bytes).\n\n#### Example:\n\n```javascript\nscrypt('mypassword', 'saltysalt', {\n    N: 16384,\n    r: 8,\n    p: 1,\n    dkLen: 16,\n    encoding: 'hex'\n}, function(derivedKey) {\n    console.log(derivedKey); // \"5012b74fca8ec8a4a0a62ffdeeee959d\"\n});\n```\n\n### Legacy API (deprecated)\n\n#### scrypt(password, salt, logN, r, dkLen, [interruptStep], callback, [encoding])\n\nLegacy API doesn't support parallelization parameter greater than 1.\n\n##### Arguments:\n\n* *password* — password (`string` or `Array` of bytes or `Uint8Array`)\n* *salt* — salt (`string` or `Array` of bytes or `Uint8Array`)\n* *logN* — CPU/memory cost parameter (1 to 31)\n* *r* — block size parameter\n* *dkLen* — length of derived key\n* *interruptStep* — (optional) steps to split calculation with timeouts (defaults to 1000)\n* *callback* — callback function receiving result (`function (Array|Uint8Array|string)`)\n* *encoding* — (optional) result encoding (`'base64'`, `'hex'`, `'binary'` or undefined).\n\nWhen encoding is not set, the result is an `Array` of bytes.\n\n\nLicense\n-------\n\nBSD-like, see LICENSE file or MIT license at your choice.\n",
  "readmeFilename": "README.md",
  "_id": "scrypt-async@1.3.1",
  "dist": {
    "shasum": "52697e191a77f87b93ff30a3ecd0573bdcdeee8c"
  },
  "_from": "scrypt-async@^1.2.0",
  "_resolved": "https://registry.npmjs.org/scrypt-async/-/scrypt-async-1.3.1.tgz"
}
