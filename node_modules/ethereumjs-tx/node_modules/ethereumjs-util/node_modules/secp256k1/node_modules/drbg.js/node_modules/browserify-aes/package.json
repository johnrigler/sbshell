{
  "name": "browserify-aes",
  "version": "1.0.8",
  "description": "aes, for browserify",
  "browser": "browser.js",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "standard": "standard",
    "unit": "node test/index.js | tspec",
    "test": "npm run standard && npm run unit"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/crypto-browserify/browserify-aes.git"
  },
  "keywords": [
    "aes",
    "crypto",
    "browserify"
  ],
  "author": "",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/crypto-browserify/browserify-aes/issues"
  },
  "homepage": "https://github.com/crypto-browserify/browserify-aes",
  "dependencies": {
    "buffer-xor": "^1.0.3",
    "cipher-base": "^1.0.0",
    "create-hash": "^1.1.0",
    "evp_bytestokey": "^1.0.3",
    "inherits": "^2.0.1",
    "safe-buffer": "^5.0.1"
  },
  "devDependencies": {
    "standard": "^9.0.0",
    "tap-spec": "^4.1.1",
    "tape": "^4.6.3"
  },
  "readme": "# browserify-aes\n[![Build Status](https://travis-ci.org/crypto-browserify/browserify-aes.svg)](https://travis-ci.org/crypto-browserify/browserify-aes)\n\nNode style aes for use in the browser.\nImplements:\n\n - createCipher\n - createCipheriv\n - createDecipher\n - createDecipheriv\n - getCiphers\n\nIn node.js, the `crypto` implementation is used, in browsers it falls back to a pure JavaScript implementation.\n\nMuch of this library has been taken from the aes implementation in [triplesec](https://github.com/keybase/triplesec),  a partial derivation of [crypto-js](https://code.google.com/p/crypto-js/).\n\n`EVP_BytesToKey` is a straight up port of the same function from OpenSSL as there is literally no documenation on it beyond it using 'undocumented extensions' for longer keys.\n\n## LICENSE [MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "browserify-aes@1.0.8",
  "_from": "browserify-aes@^1.0.6"
}
